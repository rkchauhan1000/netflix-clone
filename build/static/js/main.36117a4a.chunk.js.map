{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","console","log","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","window","alert","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","REQUESTS","fetchTopRated","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumantries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.36117a4a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst image_url = \"https://image.tmdb.org/t/p/original\";\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"1840\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    console.log(\"hello\");\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          console.log(url);\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => {\n          console.log(error);\n          window.alert(\"Sorry!! error in this try other trailers\");\n        });\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${image_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\nexport default Row;\n","const API_KEY = '9d234121787d4da8e856e497cd1f12b8';\n\nconst REQUESTS = {\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`,\n    fetchTrending : `/trending/all/day?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchActionMovies : `/discover/tv?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies : `/discover/tv?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies : `/discover/tv?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies : `/discover/tv?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumantries : `/discover/tv?api_key=${API_KEY}&with_genres=99`,\n\n};\n\nexport default REQUESTS;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport REQUESTS from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(REQUESTS.fetchNetflixOriginals);\n\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1>{movie?.title || movie?.name || movie?.original_name}</h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List </button>\n        </div>\n\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner-fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Navbar.css\";\nfunction Navbar() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://pmcvariety.files.wordpress.com/2020/05/netflix-logo.png?w=681&h=383&crop=1\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav_avatar\"\n        src=\"https://ih0.redbubble.net/image.618427277.3222/flat,1000x1000,075,f.u2.jpg\"\n        alt=\"Netflix Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Row from \"./Row\";\nimport \"./App.css\";\nimport Banner from \"./Banner\";\nimport Navbar from \"./Navbar\";\nimport REQUESTS from \"./requests\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Banner />\n      <Row\n        title={\"Netflix Orignals\"}\n        fetchUrl={REQUESTS.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title={\"Trending Now\"} fetchUrl={REQUESTS.fetchTrending} />\n      <Row title={\"Top Rated\"} fetchUrl={REQUESTS.fetchTopRated} />\n      <Row title={\"Action Movies\"} fetchUrl={REQUESTS.fetchActionMovies} />\n      <Row title={\"Horror Movies\"} fetchUrl={REQUESTS.fetchHorrorMovies} />\n      <Row title={\"Comedy Movies\"} fetchUrl={REQUESTS.fetchComedyMovies} />\n      <Row title={\"Romance Movies\"} fetchUrl={REQUESTS.fetchRomanceMovies} />\n      <Row title={\"Documantries\"} fetchUrl={REQUESTS.fetchDocumantries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}